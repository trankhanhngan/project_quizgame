const startButton = document.getElementById("start-btn");
const nextButton = document.getElementById("next-btn");
const exitButton = document.getElementById("exit-btn");
const questionContainer = document.getElementById("question-container");
const questionElement = document.getElementById("question");
const answerButtons = document.getElementById("answer-buttons");
const scoreText = document.getElementById("score");
const timerElement = document.getElementById("timer"); // th√™m ph·∫ßn hi·ªÉn th·ªã th·ªùi gian

let shuffledQuestions, currentQuestionIndex, score, timeLeft, timerInterval;

const questions = [
  // HTML
  {
    question: "HTML l√† vi·∫øt t·∫Øt c·ªßa g√¨?",
    answers: [
      { text: "HyperText Markup Language", correct: true },
      { text: "HighText Machine Language", correct: false },
      { text: "Hyperlinks Markup Language", correct: false },
      { text: "Home Tool Markup Language", correct: false },
    ],
  },
  {
    question: "Th·∫ª n√†o d√πng ƒë·ªÉ ch√®n ·∫£nh v√†o HTML?",
    answers: [
      { text: "<image>", correct: false },
      { text: "<img>", correct: true },
      { text: "<src>", correct: false },
      { text: "<picture>", correct: false },
    ],
  },
  {
    question: "Th·∫ª n√†o ƒë·ªÉ t·∫°o m·ªôt li√™n k·∫øt?",
    answers: [
      { text: "<a>", correct: true },
      { text: "<link>", correct: false },
      { text: "<url>", correct: false },
      { text: "<href>", correct: false },
    ],
  },
  {
    question: "Thu·ªôc t√≠nh n√†o c·ªßa th·∫ª <a> x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n?",
    answers: [
      { text: "src", correct: false },
      { text: "path", correct: false },
      { text: "href", correct: true },
      { text: "link", correct: false },
    ],
  },

  // CSS
  {
    question: "CSS d√πng ƒë·ªÉ l√†m g√¨?",
    answers: [
      { text: "T·∫°o c·∫•u tr√∫c trang web", correct: false },
      { text: "Th√™m logic cho web", correct: false },
      { text: "Trang tr√≠ v√† ƒë·ªãnh d·∫°ng giao di·ªán", correct: true },
      { text: "X·ª≠ l√Ω d·ªØ li·ªáu", correct: false },
    ],
  },
  {
    question: "C√∫ ph√°p ƒë√∫ng ƒë·ªÉ ƒë·ªïi m√†u ch·ªØ trong CSS?",
    answers: [
      { text: "font-color: red;", correct: false },
      { text: "text-color: red;", correct: false },
      { text: "color: red;", correct: true },
      { text: "text: red;", correct: false },
    ],
  },
  {
    question: "Thu·ªôc t√≠nh n√†o d√πng ƒë·ªÉ cƒÉn gi·ªØa vƒÉn b·∫£n?",
    answers: [
      { text: "align: center;", correct: false },
      { text: "text-align: center;", correct: true },
      { text: "font-align: middle;", correct: false },
      { text: "justify: center;", correct: false },
    ],
  },
  {
    question: "File CSS th∆∞·ªùng c√≥ ph·∫ßn m·ªü r·ªông l√† g√¨?",
    answers: [
      { text: ".html", correct: false },
      { text: ".css", correct: true },
      { text: ".js", correct: false },
      { text: ".scss", correct: false },
    ],
  },

  // JavaScript
  {
    question: "JavaScript ƒë∆∞·ª£c d√πng ƒë·ªÉ l√†m g√¨?",
    answers: [
      { text: "Trang tr√≠ giao di·ªán", correct: false },
      { text: "Th√™m t∆∞∆°ng t√°c cho web", correct: true },
      { text: "T·∫°o c·∫•u tr√∫c HTML", correct: false },
      { text: "L∆∞u d·ªØ li·ªáu", correct: false },
    ],
  },
  {
    question: "C√∫ ph√°p ƒë√∫ng ƒë·ªÉ in ra console l√†?",
    answers: [
      { text: "console.write()", correct: false },
      { text: "console.print()", correct: false },
      { text: "console.log()", correct: true },
      { text: "log.console()", correct: false },
    ],
  },
  {
    question: "K·∫øt qu·∫£ c·ªßa 2 + '2' trong JavaScript l√† g√¨?",
    answers: [
      { text: "4", correct: false },
      { text: "22", correct: true },
      { text: "Error", correct: false },
      { text: "NaN", correct: false },
    ],
  },
  {
    question: "DOM trong JavaScript l√† g√¨?",
    answers: [
      { text: "Document Object Model", correct: true },
      { text: "Data Object Management", correct: false },
      { text: "Dynamic Online Model", correct: false },
      { text: "Document Order Method", correct: false },
    ],
  },

  // IT
  {
    question: "Git d√πng ƒë·ªÉ l√†m g√¨?",
    answers: [
      { text: "L∆∞u tr·ªØ file t·∫°m th·ªùi", correct: false },
      { text: "Qu·∫£n l√Ω phi√™n b·∫£n code", correct: true },
      { text: "T·∫°o hi·ªáu ·ª©ng website", correct: false },
      { text: "Thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu", correct: false },
    ],
  },
  {
    question: "API l√† vi·∫øt t·∫Øt c·ªßa?",
    answers: [
      { text: "Application Programming Interface", correct: true },
      { text: "App Protocol Internet", correct: false },
      { text: "Applied Program Integration", correct: false },
      { text: "Automation Process Input", correct: false },
    ],
  },
  {
    question: "Framework n√†o sau ƒë√¢y d√πng cho Frontend?",
    answers: [
      { text: "Laravel", correct: false },
      { text: "Django", correct: false },
      { text: "ReactJS", correct: true },
      { text: "Spring Boot", correct: false },
    ],
  },
];

startButton.addEventListener("click", startGame);
nextButton.addEventListener("click", () => {
  currentQuestionIndex++;
  setNextQuestion();
});
exitButton.addEventListener("click", exitGame);

function startGame() {
  startButton.classList.add("hide");
  exitButton.classList.remove("hide");
  scoreText.textContent = "";
  shuffledQuestions = questions.sort(() => Math.random() - 0.5);
  currentQuestionIndex = 0;
  score = 0;
  questionContainer.classList.remove("hide");
  setNextQuestion();
}

function setNextQuestion() {
  resetState();
  showQuestion(shuffledQuestions[currentQuestionIndex]);
  startTimer();
}

function showQuestion(question) {
  questionElement.textContent = question.question;
  answerButtons.innerHTML = "";
  question.answers.forEach((answer) => {
    const button = document.createElement("button");
    button.textContent = answer.text;
    button.classList.add("btn");
    if (answer.correct) button.dataset.correct = true;
    button.addEventListener("click", selectAnswer);
    answerButtons.appendChild(button);
  });
}

function resetState() {
  clearInterval(timerInterval);
  timeLeft = 10;
  timerElement.textContent = `‚è∞ ${timeLeft}s`;
  nextButton.classList.add("hide");
  while (answerButtons.firstChild) {
    answerButtons.removeChild(answerButtons.firstChild);
  }
}

function startTimer() {
  timerInterval = setInterval(() => {
    timeLeft--;
    timerElement.textContent = `‚è∞ ${timeLeft}s`;
    if (timeLeft <= 0) {
      clearInterval(timerInterval);
      handleTimeOut();
    }
  }, 1000);
}

function handleTimeOut() {
  Array.from(answerButtons.children).forEach((button) => {
    button.disabled = true;
  });
  timerElement.textContent = "‚è≥ H·∫øt gi·ªù!";
  if (shuffledQuestions.length > currentQuestionIndex + 1) {
    nextButton.classList.remove("hide");
  } else {
    startButton.textContent = "Restart";
    startButton.classList.remove("hide");
    scoreText.textContent = `üéâ ƒêi·ªÉm c·ªßa b·∫°n: ${score}/${questions.length}`;
  }
}

function selectAnswer(e) {
  clearInterval(timerInterval);
  const selectedButton = e.target;
  const correct = selectedButton.dataset.correct;
  if (correct) {
    score++;
    selectedButton.classList.add("correct");
  } else {
    selectedButton.classList.add("wrong");
  }

  Array.from(answerButtons.children).forEach((button) => {
    button.disabled = true;
    if (button.dataset.correct) button.classList.add("correct");
  });

  if (shuffledQuestions.length > currentQuestionIndex + 1) {
    nextButton.classList.remove("hide");
  } else {
    startButton.textContent = "Restart";
    startButton.classList.remove("hide");
    scoreText.textContent = `üéØ ƒêi·ªÉm c·ªßa b·∫°n: ${score}/${questions.length}`;
  }
}

function exitGame() {
  clearInterval(timerInterval);
  questionContainer.classList.add("hide");
  startButton.classList.remove("hide");
  nextButton.classList.add("hide");
  exitButton.classList.add("hide");
  scoreText.textContent = "";
  timerElement.textContent = "";
}
